name: Upsert OpenAI Assistant

on:
  push:
    branches:
      - main
    paths:
      - upsert_scenario_path.txt
      - scenarios/**/setting.json
      - scenarios/**/instruction.txt

jobs:
  upsert-assistant:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get changed files in the docs folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v45
        with:
          files: |
            scenarios/**/setting.json
            scenarios/**/instruction.txt
          files_ignore: scenarios/common/setting.json

      - name: Run step if any file(s) in the docs folder change
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files-specific.outputs.all_changed_files }}
        run: |
          # ディレクトリ部分をユニーク化
          UNIQUE_DIRS=$(echo "$ALL_CHANGED_FILES" | tr ' ' '\n' | xargs -n 1 dirname | sort | uniq)

          for dir in ${UNIQUE_DIRS}; do
            echo "$dir was changed"
            parent_dir=$(dirname "$dir")

            SETTING_FILE="${dir}/setting.json"
            ASSISTANT_ID=$(jq -r '.assistant_id' "$SETTING_FILE")
            ASSISTANT_NAME=$(jq -r '.assistant_name' "$SETTING_FILE")
            MODEL=$(jq -r '.model' "$SETTING_FILE")
            TOP_P=$(jq -r '.top_p' "$SETTING_FILE")
            TEMPERATURE=$(jq -r '.temperature' "$SETTING_FILE")
            RESPONSE_FORMAT=$(jq '.response_format' "$SETTING_FILE")

            COMMON_SETTING_FILE="${parent_dir}/common/setting.json"
            PROJECT_NAME=$(jq -r '.project_name' "$COMMON_SETTING_FILE")

            INSTRUCTION_FILE="${dir}/instruction.txt"
            INSTRUCTION=$(cat "$INSTRUCTION_FILE")

            case "$PROJECT_NAME" in
            "demo")
              PROJECT_API_KEY="${{ secrets.OPENAI_DEMO_PROJECT_API_KEY }}"
              ;;
            "rakuten-cc")
              PROJECT_API_KEY="${{ secrets.OPENAI_RAKUTEN_CC_PROJECT_API_KEY }}"
              ;;
            "rakuten-rookie")
              PROJECT_API_KEY="${{ secrets.OPENAI_RAKUTEN_ROOKIE_PROJECT_API_KEY }}"
              ;;
            "bs24")
              PROJECT_API_KEY="${{ secrets.OPENAI_BS_24_PROJECT_API_KEY }}"
              ;;
            *)
              echo "Error: Unknown project_name ${PROJECT_NAME}"
              exit 1
              ;;
            esac

            # JSONデータの安全な生成
            JSON_PAYLOAD=$(jq -n \
              --arg name "$ASSISTANT_NAME" \
              --arg instructions "$INSTRUCTION" \
              --arg model "$MODEL" \
              --argjson response_format "$RESPONSE_FORMAT" \
              --argjson top_p "$TOP_P" \
              --argjson temperature "$TEMPERATURE" \
              '{
                name: $name,
                instructions: $instructions,
                model: $model,
                top_p: $top_p,
                temperature: $temperature,
                response_format: $response_format
              }')

            # ASSISTANT_IDの有無でcreate or updateを判定
            if [[ -n "$ASSISTANT_ID" ]]; then
              URL="https://api.openai.com/v1/assistants/${ASSISTANT_ID}"
              ACTION_TYPE="update" >> $GITHUB_ENV
            else
              URL="https://api.openai.com/v1/assistants"
              ACTION_TYPE="create" >> $GITHUB_ENV
            fi

            # curlコマンドでリクエストを送信
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
              -X POST \
              "$URL" \
              -H "Content-Type: application/json" \
              -H "OpenAI-Beta: assistants=v2" \
              -H "Authorization: Bearer ${PROJECT_API_KEY}" \
              -d "$JSON_PAYLOAD")

            # HTTPステータスコードの確認
            if [[ "$RESPONSE" -ne 200 ]]; then
              echo "Error: API request failed with status code $RESPONSE."
              echo "Response:"
              cat response.json
              exit 1
            fi

            # 正常終了の場合
            echo "Request was successful. Response:"
            cat response.json

            id=$(jq -r '.id' response.json)
            jq --arg assistant_id "$id" '.assistant_id = $assistant_id' scenarios/rakuten-cc/rakuten-cc/setting.json > tmp.json
            mv tmp.json $SETTING_FILE
          done

      - name: Commit changes
        if: env.ACTION_TYPE == 'create'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add scenarios/**/setting.json
          git commit -m "Update assistant_id in setting.json"

      - name: Create Pull Request
        if: env.ACTION_TYPE == 'create'
        uses: peter-evans/create-pull-request@v5
        with:
          branch: update-assistant-id
          base: main
          title: "Update assistant_id in setting.json"
          body: |
            This PR updates the assistant_id in $SETTING_FILE based on the value from response.json.
